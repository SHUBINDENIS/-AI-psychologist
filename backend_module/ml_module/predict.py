import numpy as np
import pandas as pd
import tensorflow as tf
import joblib
from ml_module.preprocess import preprocess_data

# –ü—É—Ç–∏ –∫ –º–æ–¥–µ–ª–∏ –∏ scaler
MODEL_PATH = "ml_module/saved_model/model.keras"
SCALER_PATH = "ml_module/saved_model/minmax_scaler.pkl"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –∫–æ–¥–∞ —Ç–∏–ø—É –ª–∏—á–Ω–æ—Å—Ç–∏
personality_types = {
    "ENTJ": "–ü—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å",
    "ESTJ": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "ENFJ": "–ù–∞—Å—Ç–∞–≤–Ω–∏–∫",
    "ESFJ": "–≠–Ω—Ç—É–∑–∏–∞—Å—Ç",
    "ENTP": "–ò—Å–∫–∞—Ç–µ–ª—å",
    "ENFP": "–°–æ–≤–µ—Ç—á–∏–∫",
    "ESTP": "–ú–∞—Ä—à–∞–ª",
    "ESFP": "–ü–æ–ª–∏—Ç–∏–∫",
    "INTJ": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
    "ISTJ": "–ò–Ω—Å–ø–µ–∫—Ç—Ä",
    "INFJ": "–ì—É–º–∞–Ω–∏—Å—Ç",
    "ISFJ": "–•—Ä–∞–Ω–∏—Ç–µ–ª—å",
    "INTP": "–ö—Ä–∏—Ç–∏–∫",
    "INFP": "–õ–∏—Ä–∏–∫",
    "ISTP": "–ú–∞—Å—Ç–µ—Ä",
    "ISFP": "–ü–æ—Å—Ä–µ–¥–Ω–∏–∫"
}


# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ –∏ scaler...")
model = tf.keras.models.load_model(MODEL_PATH)
scaler = joblib.load(SCALER_PATH)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —á–∏—Å–ª–∞ –≤ –±—É–∫–≤—É
def prediction_to_letter(value, true_letter, false_letter):
    return true_letter if value >= 0.5 else false_letter


def make_predictions(input_data):
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö.

    :param input_data: DataFrame –∏–ª–∏ –º–∞—Å—Å–∏–≤ —Å –≤—Ö–æ–¥–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    :return: –ú–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    """
    print("üöÄ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è make_predictions")

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ DataFrame –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    if isinstance(input_data, np.ndarray):
        input_data = pd.DataFrame(input_data)

    # –ü—Ä–µ–¥–æ–±—Ä–∞–±–æ—Ç–∫–∞: –ø–æ–ª—É—á–∞–µ–º X (y –Ω–∞–º –Ω–µ –Ω—É–∂–µ–Ω)
    X, _ = preprocess_data(input_data, scaler)

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    predictions = (model.predict(X))[0].tolist()

    print("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è make_predictions")

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è
    last_four_predictions = predictions[-4:]
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –±—É–∫–≤—ã
    letters = [
            prediction_to_letter(last_four_predictions[0], 'E', 'I'),  # –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç/–ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç
            prediction_to_letter(last_four_predictions[2], 'S', 'N'),  # –ò–Ω—Ç—É–∏—Ç–∏–≤–Ω—ã–π/–°–µ–Ω—Å–æ—Ä–Ω—ã–π
            prediction_to_letter(last_four_predictions[1], 'F', 'T'),  # –õ–æ–≥–∏—á–µ—Å–∫–∏–π/–≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π
            prediction_to_letter(last_four_predictions[3], 'P', 'J')   # –ü–ª–∞–Ω–æ–≤—ã–π/–°–ø–æ–Ω—Ç–∞–Ω–Ω—ã–π
             ]

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ 4 –±—É–∫–≤
    personality_code = ''.join(letters)

    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ –ø–æ –∫–æ–¥—É
    personality_name = personality_types.get(personality_code, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")

    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –º–∞—Å—Å–∏–≤ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π
    predictions.append(personality_name + "(" + personality_code + ")")
    



    return predictions
